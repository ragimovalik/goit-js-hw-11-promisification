{"version":3,"sources":["webpack:///./js/task1.js","webpack:///./js/task2.js","webpack:///./js/task3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","document","getElementById","addEventListener","debounce","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","reject","id","logSuccess","dir","logError","warn","amount","catch"],"mappings":"gLAEMA,EAAQ,SAAAC,GAOZ,OALgB,IAAIC,SAAQ,SAAAC,GAC1BC,YAAW,WACTD,EAAQ,GAAGF,KACVA,OAKDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,QAEHG,SAASC,eAAe,UAChCC,iBAAiB,QAASC,KAEtC,WACEZ,EAAM,KAAMa,KAAKR,GACjBL,EAAM,KAAMa,KAAKR,GACjBL,EAAM,MAAMa,KAAKR,KAL8C,M,kCCb3DS,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIjB,SAAQ,SAAAC,GAIjBA,EAHqBe,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAM7DhB,EAAS,SAAAiB,GAAY,OAAIf,QAAQgB,MAAMD,IAEzBb,SAASC,eAAe,UAChCC,iBAAiB,QAASC,KAEtC,WACEK,EAAgBH,EAAO,SAASD,KAAKR,GAErCD,YAAW,WACTa,EAAgBH,EAAO,OAAOD,KAAKR,KAClC,OAP4D,MCnBjE,IAIMmB,EAAkB,SAAAC,GACtB,IALiCC,EAAKC,EAKhC3B,GAL2B0B,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMpD,OAAO,IAAIxB,SAAQ,SAACC,EAAS4B,GAC3B3B,YAAW,WACUwB,KAAKE,SAAW,IAGjC3B,EAAQ,CAAE6B,GAAIP,EAAYO,GAAI1B,KAAMN,IAEtC+B,EAAON,EAAYO,SAEpBhC,IAGCiC,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAI1B,EAAW,EAAXA,KACxBC,QAAQ2B,IAAR,eAA2BF,EAA3B,iBAA8C1B,EAA9C,QAGI6B,EAAW,SAAAH,GACfzB,QAAQ6B,KAAR,gCAA6CJ,EAA7C,8BAGkBvB,SAASC,eAAe,UAChCC,iBAAiB,QAASC,KAEtC,WACEY,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAAOxB,KAAKoB,GAAYK,MAAMH,GAChEX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAAOxB,KAAKoB,GAAYK,MAAMH,GAChEX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,KAAMxB,KAAKoB,GAAYK,MAAMH,GAC/DX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAAOxB,KAAKoB,GAAYK,MAAMH,KAND,S","file":"main.c5560591e10249901269.js","sourcesContent":["import debounce from 'lodash.debounce';\r\n\r\nconst delay = ms => {\r\n  // Твой код\r\n  const promise = new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(`${ms}`);\r\n    }, ms);\r\n  });\r\n  return promise;\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time} ms`);\r\n\r\nconst taskStartEl = document.getElementById('task-1');\r\ntaskStartEl.addEventListener('click', debounce(taskStartHandler, 2000));\r\n\r\nfunction taskStartHandler() {\r\n  delay(2000).then(logger);\r\n  delay(1000).then(logger);\r\n  delay(1500).then(logger);\r\n}\r\n\r\n/*\r\nНапиши функцию delay(ms), которая возвращает промис, \r\nпереходящий в состояние \"resolved\" через ms миллисекунд. \r\nЗначением исполнившегося промиса должно быть то кол-во \r\nмиллисекунд которое передали во время вызова функции delay.\r\n */\r\n// Вызовы функции для проверки\r\n// delay(2000).then(logger); // Resolved after 2000ms\r\n// delay(1000).then(logger); // Resolved after 1000ms\r\n// delay(1500).then(logger); // Resolved after 1500ms\r\n","import debounce from 'lodash.debounce';\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise(resolve => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    resolve(updatedUsers);\r\n  });\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\nconst taskStartEl = document.getElementById('task-2');\r\ntaskStartEl.addEventListener('click', debounce(taskStartHandler, 1000));\r\n\r\nfunction taskStartHandler() {\r\n  toggleUserState(users, 'Mango').then(logger);\r\n\r\n  setTimeout(() => {\r\n    toggleUserState(users, 'Lux').then(logger);\r\n  }, 1000);\r\n}\r\n\r\n/*\r\nПерепиши функцию toggleUserState() так, чтобы она не использовала \r\ncallback-функцию callback, а принимала всего два параметра allUsers \r\nи userName и возвращала промис.\r\n*/\r\n","import debounce from 'lodash.debounce';\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = transaction => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve({ id: transaction.id, time: delay });\r\n      }\r\n      reject(transaction.id);\r\n    });\r\n  }, delay);\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.dir(`Transaction ${id} processed in ${time} ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nconst taskStartEl = document.getElementById('task-3');\r\ntaskStartEl.addEventListener('click', debounce(taskStartHandler, 1500));\r\n\r\nfunction taskStartHandler() {\r\n  makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n  makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n  makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n  makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n}\r\n\r\n/*\r\nПерепиши функцию makeTransaction() так, чтобы она не использовала \r\ncallback-функции onSuccess и onError, а принимала всего один \r\nпараметр transaction и возвращала промис.\r\n*/\r\n"],"sourceRoot":""}