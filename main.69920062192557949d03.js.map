{"version":3,"sources":["webpack:///./js/task1.js","webpack:///./js/task2.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","document","getElementById","addEventListener","debounce","then","users","name","active","toggleUserState","allUsers","userName","callback","map","user","updatedUsers","table"],"mappings":"gLAEMA,EAAQ,SAAAC,GAOZ,OALgB,IAAIC,SAAQ,SAAAC,GAC1BC,YAAW,WACTD,EAAQ,GAAGF,KACVA,OAKDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,QAEHG,SAASC,eAAe,UAChCC,iBAAiB,QAASC,KAEtC,WACEZ,EAAM,KAAMa,KAAKR,GACjBL,EAAM,KAAMa,KAAKR,GACjBL,EAAM,MAAMa,KAAKR,KAL8C,M,kCCT3DS,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,EAAUC,GAK3CA,EAJqBF,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,OAM3DjB,EAAS,SAAAkB,GAAY,OAAIhB,QAAQiB,MAAMD,IAK7CN,EAAgBH,EAAO,QAAST,GAChCY,EAAgBH,EAAO,MAAOT,G","file":"main.69920062192557949d03.js","sourcesContent":["import debounce from 'lodash.debounce';\r\n\r\nconst delay = ms => {\r\n  // Твой код\r\n  const promise = new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(`${ms}`);\r\n    }, ms);\r\n  });\r\n  return promise;\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time} ms`);\r\n\r\nconst taskStartEl = document.getElementById('task-1');\r\ntaskStartEl.addEventListener('click', debounce(taskStartHandler, 2000));\r\n\r\nfunction taskStartHandler() {\r\n  delay(2000).then(logger);\r\n  delay(1000).then(logger);\r\n  delay(1500).then(logger);\r\n}\r\n\r\n/*\r\nНапиши функцию delay(ms), которая возвращает промис, \r\nпереходящий в состояние \"resolved\" через ms миллисекунд. \r\nЗначением исполнившегося промиса должно быть то кол-во \r\nмиллисекунд которое передали во время вызова функции delay.\r\n */\r\n// Вызовы функции для проверки\r\n// delay(2000).then(logger); // Resolved after 2000ms\r\n// delay(1000).then(logger); // Resolved after 1000ms\r\n// delay(1500).then(logger); // Resolved after 1500ms\r\n","/*\r\nПерепиши функцию toggleUserState() так, чтобы она не использовала \r\ncallback-функцию callback, а принимала всего два параметра allUsers \r\nи userName и возвращала промис.\r\n*/\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName, callback) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n\r\n  callback(updatedUsers);\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\ntoggleUserState(users, 'Mango', logger);\r\ntoggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\n// toggleUserState(users, 'Mango').then(logger);\r\n// toggleUserState(users, 'Lux').then(logger);"],"sourceRoot":""}